// Mocks generated by Mockito 5.4.2 from annotations
// in btc_demo/test/ui/home/bloc/home_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:btc_demo/lib/backend_api.dart' as _i2;
import 'package:btc_demo/lib/coins_price_repository.dart' as _i3;
import 'package:btc_demo/lib/model/wallet.dart' as _i4;
import 'package:btc_demo/lib/wallet_repository.dart' as _i6;
import 'package:coingecko_api/coingecko_api.dart' as _i5;
import 'package:coingecko_api/data/market_chart_data.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBackendApi_0 extends _i1.SmartFake implements _i2.BackendApi {
  _FakeBackendApi_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCoinsPriceRepository_1 extends _i1.SmartFake
    implements _i3.CoinsPriceRepository {
  _FakeCoinsPriceRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWallet_2 extends _i1.SmartFake implements _i4.Wallet {
  _FakeWallet_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCoinGeckoApi_3 extends _i1.SmartFake implements _i5.CoinGeckoApi {
  _FakeCoinGeckoApi_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WalletRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWalletRepository extends _i1.Mock implements _i6.WalletRepository {
  MockWalletRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BackendApi get backendApi => (super.noSuchMethod(
        Invocation.getter(#backendApi),
        returnValue: _FakeBackendApi_0(
          this,
          Invocation.getter(#backendApi),
        ),
      ) as _i2.BackendApi);
  @override
  _i3.CoinsPriceRepository get coinsPriceRepository => (super.noSuchMethod(
        Invocation.getter(#coinsPriceRepository),
        returnValue: _FakeCoinsPriceRepository_1(
          this,
          Invocation.getter(#coinsPriceRepository),
        ),
      ) as _i3.CoinsPriceRepository);
  @override
  _i7.Future<_i4.Wallet> getWallet() => (super.noSuchMethod(
        Invocation.method(
          #getWallet,
          [],
        ),
        returnValue: _i7.Future<_i4.Wallet>.value(_FakeWallet_2(
          this,
          Invocation.method(
            #getWallet,
            [],
          ),
        )),
      ) as _i7.Future<_i4.Wallet>);
}

/// A class which mocks [CoinsPriceRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoinsPriceRepository extends _i1.Mock
    implements _i3.CoinsPriceRepository {
  MockCoinsPriceRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.CoinGeckoApi get coinGeckoApi => (super.noSuchMethod(
        Invocation.getter(#coinGeckoApi),
        returnValue: _FakeCoinGeckoApi_3(
          this,
          Invocation.getter(#coinGeckoApi),
        ),
      ) as _i5.CoinGeckoApi);
  @override
  _i7.Future<double> getBtcToUsdPrice() => (super.noSuchMethod(
        Invocation.method(
          #getBtcToUsdPrice,
          [],
        ),
        returnValue: _i7.Future<double>.value(0.0),
      ) as _i7.Future<double>);
  @override
  _i7.Future<List<_i8.MarketChartData>> getCoinToUsdPriceHistory({
    required String? coinId,
    required int? days,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCoinToUsdPriceHistory,
          [],
          {
            #coinId: coinId,
            #days: days,
          },
        ),
        returnValue: _i7.Future<List<_i8.MarketChartData>>.value(
            <_i8.MarketChartData>[]),
      ) as _i7.Future<List<_i8.MarketChartData>>);
}
