// Mocks generated by Mockito 5.4.2 from annotations
// in btc_demo/test/lib/coins_price_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i18;

import 'package:coingecko_api/coingecko_api.dart' as _i17;
import 'package:coingecko_api/coingecko_result.dart' as _i16;
import 'package:coingecko_api/data/coin.dart' as _i22;
import 'package:coingecko_api/data/coin_history.dart' as _i24;
import 'package:coingecko_api/data/coin_short.dart' as _i20;
import 'package:coingecko_api/data/market.dart' as _i21;
import 'package:coingecko_api/data/market_chart_data.dart' as _i25;
import 'package:coingecko_api/data/ohlc_info.dart' as _i26;
import 'package:coingecko_api/data/price_info.dart' as _i19;
import 'package:coingecko_api/data/ticker.dart' as _i23;
import 'package:coingecko_api/sections/asset_platforms_section.dart' as _i6;
import 'package:coingecko_api/sections/categories_section.dart' as _i7;
import 'package:coingecko_api/sections/coins_section.dart' as _i4;
import 'package:coingecko_api/sections/companies_section.dart' as _i15;
import 'package:coingecko_api/sections/contract_section.dart' as _i5;
import 'package:coingecko_api/sections/derivatives_section.dart' as _i10;
import 'package:coingecko_api/sections/exchange_rates_section.dart' as _i11;
import 'package:coingecko_api/sections/exchanges_section.dart' as _i8;
import 'package:coingecko_api/sections/global_section.dart' as _i14;
import 'package:coingecko_api/sections/indexes_section.dart' as _i9;
import 'package:coingecko_api/sections/ping_section.dart' as _i2;
import 'package:coingecko_api/sections/search_section.dart' as _i12;
import 'package:coingecko_api/sections/simple_section.dart' as _i3;
import 'package:coingecko_api/sections/trending_section.dart' as _i13;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePingSection_0 extends _i1.SmartFake implements _i2.PingSection {
  _FakePingSection_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSimpleSection_1 extends _i1.SmartFake implements _i3.SimpleSection {
  _FakeSimpleSection_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCoinsSection_2 extends _i1.SmartFake implements _i4.CoinsSection {
  _FakeCoinsSection_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeContractSection_3 extends _i1.SmartFake
    implements _i5.ContractSection {
  _FakeContractSection_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAssetPlatformsSection_4 extends _i1.SmartFake
    implements _i6.AssetPlatformsSection {
  _FakeAssetPlatformsSection_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCategoriesSection_5 extends _i1.SmartFake
    implements _i7.CategoriesSection {
  _FakeCategoriesSection_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeExchangesSection_6 extends _i1.SmartFake
    implements _i8.ExchangesSection {
  _FakeExchangesSection_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIndexesSection_7 extends _i1.SmartFake
    implements _i9.IndexesSection {
  _FakeIndexesSection_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDerivativesSection_8 extends _i1.SmartFake
    implements _i10.DerivativesSection {
  _FakeDerivativesSection_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeExchangeRatesSection_9 extends _i1.SmartFake
    implements _i11.ExchangeRatesSection {
  _FakeExchangeRatesSection_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSearchSection_10 extends _i1.SmartFake
    implements _i12.SearchSection {
  _FakeSearchSection_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTrendingSection_11 extends _i1.SmartFake
    implements _i13.TrendingSection {
  _FakeTrendingSection_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGlobalSection_12 extends _i1.SmartFake
    implements _i14.GlobalSection {
  _FakeGlobalSection_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCompaniesSection_13 extends _i1.SmartFake
    implements _i15.CompaniesSection {
  _FakeCompaniesSection_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCoinGeckoResult_14<T> extends _i1.SmartFake
    implements _i16.CoinGeckoResult<T> {
  _FakeCoinGeckoResult_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CoinGeckoApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoinGeckoApi extends _i1.Mock implements _i17.CoinGeckoApi {
  MockCoinGeckoApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get enableLogging => (super.noSuchMethod(
        Invocation.getter(#enableLogging),
        returnValue: false,
      ) as bool);
  @override
  set enableLogging(bool? _enableLogging) => super.noSuchMethod(
        Invocation.setter(
          #enableLogging,
          _enableLogging,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.PingSection get ping => (super.noSuchMethod(
        Invocation.getter(#ping),
        returnValue: _FakePingSection_0(
          this,
          Invocation.getter(#ping),
        ),
      ) as _i2.PingSection);
  @override
  _i3.SimpleSection get simple => (super.noSuchMethod(
        Invocation.getter(#simple),
        returnValue: _FakeSimpleSection_1(
          this,
          Invocation.getter(#simple),
        ),
      ) as _i3.SimpleSection);
  @override
  _i4.CoinsSection get coins => (super.noSuchMethod(
        Invocation.getter(#coins),
        returnValue: _FakeCoinsSection_2(
          this,
          Invocation.getter(#coins),
        ),
      ) as _i4.CoinsSection);
  @override
  _i5.ContractSection get contract => (super.noSuchMethod(
        Invocation.getter(#contract),
        returnValue: _FakeContractSection_3(
          this,
          Invocation.getter(#contract),
        ),
      ) as _i5.ContractSection);
  @override
  _i6.AssetPlatformsSection get assetPlatforms => (super.noSuchMethod(
        Invocation.getter(#assetPlatforms),
        returnValue: _FakeAssetPlatformsSection_4(
          this,
          Invocation.getter(#assetPlatforms),
        ),
      ) as _i6.AssetPlatformsSection);
  @override
  _i7.CategoriesSection get categories => (super.noSuchMethod(
        Invocation.getter(#categories),
        returnValue: _FakeCategoriesSection_5(
          this,
          Invocation.getter(#categories),
        ),
      ) as _i7.CategoriesSection);
  @override
  _i8.ExchangesSection get exchanges => (super.noSuchMethod(
        Invocation.getter(#exchanges),
        returnValue: _FakeExchangesSection_6(
          this,
          Invocation.getter(#exchanges),
        ),
      ) as _i8.ExchangesSection);
  @override
  _i9.IndexesSection get indexes => (super.noSuchMethod(
        Invocation.getter(#indexes),
        returnValue: _FakeIndexesSection_7(
          this,
          Invocation.getter(#indexes),
        ),
      ) as _i9.IndexesSection);
  @override
  _i10.DerivativesSection get derivatives => (super.noSuchMethod(
        Invocation.getter(#derivatives),
        returnValue: _FakeDerivativesSection_8(
          this,
          Invocation.getter(#derivatives),
        ),
      ) as _i10.DerivativesSection);
  @override
  _i11.ExchangeRatesSection get exchangeRates => (super.noSuchMethod(
        Invocation.getter(#exchangeRates),
        returnValue: _FakeExchangeRatesSection_9(
          this,
          Invocation.getter(#exchangeRates),
        ),
      ) as _i11.ExchangeRatesSection);
  @override
  _i12.SearchSection get search => (super.noSuchMethod(
        Invocation.getter(#search),
        returnValue: _FakeSearchSection_10(
          this,
          Invocation.getter(#search),
        ),
      ) as _i12.SearchSection);
  @override
  _i13.TrendingSection get trending => (super.noSuchMethod(
        Invocation.getter(#trending),
        returnValue: _FakeTrendingSection_11(
          this,
          Invocation.getter(#trending),
        ),
      ) as _i13.TrendingSection);
  @override
  _i14.GlobalSection get global => (super.noSuchMethod(
        Invocation.getter(#global),
        returnValue: _FakeGlobalSection_12(
          this,
          Invocation.getter(#global),
        ),
      ) as _i14.GlobalSection);
  @override
  _i15.CompaniesSection get companies => (super.noSuchMethod(
        Invocation.getter(#companies),
        returnValue: _FakeCompaniesSection_13(
          this,
          Invocation.getter(#companies),
        ),
      ) as _i15.CompaniesSection);
}

/// A class which mocks [SimpleSection].
///
/// See the documentation for Mockito's code generation for more information.
class MockSimpleSection extends _i1.Mock implements _i3.SimpleSection {
  MockSimpleSection() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i18.Future<_i16.CoinGeckoResult<List<_i19.PriceInfo>>> listPrices({
    required List<String>? ids,
    required List<String>? vsCurrencies,
    bool? includeMarketCap = false,
    bool? include24hVol = false,
    bool? include24hChange = false,
    bool? includeLastUpdatedAt = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listPrices,
          [],
          {
            #ids: ids,
            #vsCurrencies: vsCurrencies,
            #includeMarketCap: includeMarketCap,
            #include24hVol: include24hVol,
            #include24hChange: include24hChange,
            #includeLastUpdatedAt: includeLastUpdatedAt,
          },
        ),
        returnValue:
            _i18.Future<_i16.CoinGeckoResult<List<_i19.PriceInfo>>>.value(
                _FakeCoinGeckoResult_14<List<_i19.PriceInfo>>(
          this,
          Invocation.method(
            #listPrices,
            [],
            {
              #ids: ids,
              #vsCurrencies: vsCurrencies,
              #includeMarketCap: includeMarketCap,
              #include24hVol: include24hVol,
              #include24hChange: include24hChange,
              #includeLastUpdatedAt: includeLastUpdatedAt,
            },
          ),
        )),
      ) as _i18.Future<_i16.CoinGeckoResult<List<_i19.PriceInfo>>>);
  @override
  _i18.Future<_i16.CoinGeckoResult<List<_i19.PriceInfo>>> listTokenPrices({
    required String? id,
    required List<String>? contractAddresses,
    required List<String>? vsCurrencies,
    bool? includeMarketCap = false,
    bool? include24hVol = false,
    bool? include24hChange = false,
    bool? includeLastUpdatedAt = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listTokenPrices,
          [],
          {
            #id: id,
            #contractAddresses: contractAddresses,
            #vsCurrencies: vsCurrencies,
            #includeMarketCap: includeMarketCap,
            #include24hVol: include24hVol,
            #include24hChange: include24hChange,
            #includeLastUpdatedAt: includeLastUpdatedAt,
          },
        ),
        returnValue:
            _i18.Future<_i16.CoinGeckoResult<List<_i19.PriceInfo>>>.value(
                _FakeCoinGeckoResult_14<List<_i19.PriceInfo>>(
          this,
          Invocation.method(
            #listTokenPrices,
            [],
            {
              #id: id,
              #contractAddresses: contractAddresses,
              #vsCurrencies: vsCurrencies,
              #includeMarketCap: includeMarketCap,
              #include24hVol: include24hVol,
              #include24hChange: include24hChange,
              #includeLastUpdatedAt: includeLastUpdatedAt,
            },
          ),
        )),
      ) as _i18.Future<_i16.CoinGeckoResult<List<_i19.PriceInfo>>>);
  @override
  _i18.Future<_i16.CoinGeckoResult<List<String>>> listSupportedVsCurrencies() =>
      (super.noSuchMethod(
        Invocation.method(
          #listSupportedVsCurrencies,
          [],
        ),
        returnValue: _i18.Future<_i16.CoinGeckoResult<List<String>>>.value(
            _FakeCoinGeckoResult_14<List<String>>(
          this,
          Invocation.method(
            #listSupportedVsCurrencies,
            [],
          ),
        )),
      ) as _i18.Future<_i16.CoinGeckoResult<List<String>>>);
}

/// A class which mocks [CoinsSection].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoinsSection extends _i1.Mock implements _i4.CoinsSection {
  MockCoinsSection() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i18.Future<_i16.CoinGeckoResult<List<_i20.CoinShort>>> listCoins(
          {bool? includePlatforms = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #listCoins,
          [],
          {#includePlatforms: includePlatforms},
        ),
        returnValue:
            _i18.Future<_i16.CoinGeckoResult<List<_i20.CoinShort>>>.value(
                _FakeCoinGeckoResult_14<List<_i20.CoinShort>>(
          this,
          Invocation.method(
            #listCoins,
            [],
            {#includePlatforms: includePlatforms},
          ),
        )),
      ) as _i18.Future<_i16.CoinGeckoResult<List<_i20.CoinShort>>>);
  @override
  _i18.Future<_i16.CoinGeckoResult<List<_i21.Market>>> listCoinMarkets({
    required String? vsCurrency,
    List<String>? coinIds = const [],
    String? category = r'all',
    String? order = r'market_cap_desc',
    int? itemsPerPage = 100,
    int? page = 1,
    bool? sparkline = false,
    List<String>? priceChangePercentageIntervals = const [],
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listCoinMarkets,
          [],
          {
            #vsCurrency: vsCurrency,
            #coinIds: coinIds,
            #category: category,
            #order: order,
            #itemsPerPage: itemsPerPage,
            #page: page,
            #sparkline: sparkline,
            #priceChangePercentageIntervals: priceChangePercentageIntervals,
          },
        ),
        returnValue: _i18.Future<_i16.CoinGeckoResult<List<_i21.Market>>>.value(
            _FakeCoinGeckoResult_14<List<_i21.Market>>(
          this,
          Invocation.method(
            #listCoinMarkets,
            [],
            {
              #vsCurrency: vsCurrency,
              #coinIds: coinIds,
              #category: category,
              #order: order,
              #itemsPerPage: itemsPerPage,
              #page: page,
              #sparkline: sparkline,
              #priceChangePercentageIntervals: priceChangePercentageIntervals,
            },
          ),
        )),
      ) as _i18.Future<_i16.CoinGeckoResult<List<_i21.Market>>>);
  @override
  _i18.Future<_i16.CoinGeckoResult<_i22.Coin?>> getCoinData({
    required String? id,
    bool? localization = true,
    bool? tickers = true,
    bool? marketData = true,
    bool? communityData = true,
    bool? developerData = true,
    bool? sparkline = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCoinData,
          [],
          {
            #id: id,
            #localization: localization,
            #tickers: tickers,
            #marketData: marketData,
            #communityData: communityData,
            #developerData: developerData,
            #sparkline: sparkline,
          },
        ),
        returnValue: _i18.Future<_i16.CoinGeckoResult<_i22.Coin?>>.value(
            _FakeCoinGeckoResult_14<_i22.Coin?>(
          this,
          Invocation.method(
            #getCoinData,
            [],
            {
              #id: id,
              #localization: localization,
              #tickers: tickers,
              #marketData: marketData,
              #communityData: communityData,
              #developerData: developerData,
              #sparkline: sparkline,
            },
          ),
        )),
      ) as _i18.Future<_i16.CoinGeckoResult<_i22.Coin?>>);
  @override
  _i18.Future<_i16.CoinGeckoResult<List<_i23.Ticker>>> listCoinTickers({
    required String? id,
    List<String>? exchangeIds = const [],
    bool? includeExchangeLogo = true,
    int? page = 1,
    String? order = r'trust_score_desc',
    bool? depth = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listCoinTickers,
          [],
          {
            #id: id,
            #exchangeIds: exchangeIds,
            #includeExchangeLogo: includeExchangeLogo,
            #page: page,
            #order: order,
            #depth: depth,
          },
        ),
        returnValue: _i18.Future<_i16.CoinGeckoResult<List<_i23.Ticker>>>.value(
            _FakeCoinGeckoResult_14<List<_i23.Ticker>>(
          this,
          Invocation.method(
            #listCoinTickers,
            [],
            {
              #id: id,
              #exchangeIds: exchangeIds,
              #includeExchangeLogo: includeExchangeLogo,
              #page: page,
              #order: order,
              #depth: depth,
            },
          ),
        )),
      ) as _i18.Future<_i16.CoinGeckoResult<List<_i23.Ticker>>>);
  @override
  _i18.Future<_i16.CoinGeckoResult<_i24.CoinHistory?>> getCoinHistory({
    required String? id,
    required DateTime? date,
    bool? localization = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCoinHistory,
          [],
          {
            #id: id,
            #date: date,
            #localization: localization,
          },
        ),
        returnValue: _i18.Future<_i16.CoinGeckoResult<_i24.CoinHistory?>>.value(
            _FakeCoinGeckoResult_14<_i24.CoinHistory?>(
          this,
          Invocation.method(
            #getCoinHistory,
            [],
            {
              #id: id,
              #date: date,
              #localization: localization,
            },
          ),
        )),
      ) as _i18.Future<_i16.CoinGeckoResult<_i24.CoinHistory?>>);
  @override
  _i18.Future<_i16.CoinGeckoResult<List<_i25.MarketChartData>>>
      getCoinMarketChart({
    required String? id,
    required String? vsCurrency,
    int? days,
    String? interval,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #getCoinMarketChart,
              [],
              {
                #id: id,
                #vsCurrency: vsCurrency,
                #days: days,
                #interval: interval,
              },
            ),
            returnValue: _i18
                .Future<_i16.CoinGeckoResult<List<_i25.MarketChartData>>>.value(
                _FakeCoinGeckoResult_14<List<_i25.MarketChartData>>(
              this,
              Invocation.method(
                #getCoinMarketChart,
                [],
                {
                  #id: id,
                  #vsCurrency: vsCurrency,
                  #days: days,
                  #interval: interval,
                },
              ),
            )),
          ) as _i18.Future<_i16.CoinGeckoResult<List<_i25.MarketChartData>>>);
  @override
  _i18.Future<_i16.CoinGeckoResult<List<_i25.MarketChartData>>>
      getCoinMarketChartRanged({
    required String? id,
    required String? vsCurrency,
    required DateTime? from,
    required DateTime? to,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #getCoinMarketChartRanged,
              [],
              {
                #id: id,
                #vsCurrency: vsCurrency,
                #from: from,
                #to: to,
              },
            ),
            returnValue: _i18
                .Future<_i16.CoinGeckoResult<List<_i25.MarketChartData>>>.value(
                _FakeCoinGeckoResult_14<List<_i25.MarketChartData>>(
              this,
              Invocation.method(
                #getCoinMarketChartRanged,
                [],
                {
                  #id: id,
                  #vsCurrency: vsCurrency,
                  #from: from,
                  #to: to,
                },
              ),
            )),
          ) as _i18.Future<_i16.CoinGeckoResult<List<_i25.MarketChartData>>>);
  @override
  _i18.Future<_i16.CoinGeckoResult<List<_i26.OHLCInfo>>> getCoinOHLC({
    required String? id,
    required String? vsCurrency,
    int? days,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCoinOHLC,
          [],
          {
            #id: id,
            #vsCurrency: vsCurrency,
            #days: days,
          },
        ),
        returnValue:
            _i18.Future<_i16.CoinGeckoResult<List<_i26.OHLCInfo>>>.value(
                _FakeCoinGeckoResult_14<List<_i26.OHLCInfo>>(
          this,
          Invocation.method(
            #getCoinOHLC,
            [],
            {
              #id: id,
              #vsCurrency: vsCurrency,
              #days: days,
            },
          ),
        )),
      ) as _i18.Future<_i16.CoinGeckoResult<List<_i26.OHLCInfo>>>);
}
